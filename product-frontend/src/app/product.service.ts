import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http'; // Import HttpClient for making HTTP requests
import { Observable } from 'rxjs'; // For reactive programming

// Define the Product interface (should match your Rust Product struct)
export interface Product {
  id?: number; // Optional because it's auto-generated by the backend
  name: string;
  price: number;
  description: string;
  stock: number;
}

// Define the ApiResponse interface (should match your Rust ApiResponse struct)
export interface ApiResponse<T> {
  success: boolean;
  data: T;
  message?: string; // Add message for error responses from the backend
}

@Injectable({
  providedIn: 'root' // Makes the service a singleton available throughout the app
})
export class ProductService {
  // Base URL for your Rust API
  // IMPORTANT: Ensure this matches where your Rust API is running.
  // If your VM's port 8080 is forwarded to localhost:8080 on your Windows host, this is correct.
  private apiUrl = 'http://localhost:8080/products';

  constructor(private http: HttpClient) { } // Inject HttpClient

  // --- CRUD Operations ---

  // Create a new product
  createProduct(product: Product): Observable<ApiResponse<number>> {
    return this.http.post<ApiResponse<number>>(this.apiUrl, product);
  }

  // Get all products
  getAllProducts(): Observable<ApiResponse<Product[]>> {
    return this.http.get<ApiResponse<Product[]>>(this.apiUrl);
  }

  // Get product by ID
  getProductById(id: number): Observable<ApiResponse<Product>> {
    return this.http.get<ApiResponse<Product>>(`${this.apiUrl}/${id}`);
  }

  // Update an existing product
  updateProduct(id: number, product: Product): Observable<ApiResponse<string>> {
    return this.http.put<ApiResponse<string>>(`${this.apiUrl}/${id}`, product);
  }

  // Delete a product
  deleteProduct(id: number): Observable<ApiResponse<string>> {
    return this.http.delete<ApiResponse<string>>(`${this.apiUrl}/${id}`);
  }
}
