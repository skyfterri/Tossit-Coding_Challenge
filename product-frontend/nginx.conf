# Define a server block to handle incoming requests.
server {
  listen 80; # Nginx listens on port 80 inside the Docker container.

  # Set the root directory for serving files. This is where your Angular build output will be.
  root /usr/share/nginx/html;

  # Define the default file to serve when a directory is requested (e.g., when accessing /).
  index index.html index.htm;

  # This 'location' block is crucial for Angular's client-side routing.
  # try_files $uri $uri/ /index.html:
  # 1. Tries to serve the requested URI directly (e.g., /assets/image.png).
  # 2. If not found, tries to serve it as a directory (e.g., /my-route/ becomes /my-route/index.html).
  # 3. If still not found, it falls back to serving /index.html. This allows Angular's router
  #    to handle deep links (e.g., /features, /contact) on the client side.
  location / {
    try_files $uri $uri/ /index.html;
  }

  # Optional: Configure caching headers for static assets.
  # This tells web browsers to cache JavaScript, CSS, images, etc., for 30 days, improving performance.
  location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|eot|ttf|woff|woff2)$ {
    expires 30d;
    add_header Cache-Control "public, no-transform";
  }

  # Optional: Enable Gzip compression for better performance.
  # Compresses certain file types before sending them to the client, reducing bandwidth usage.
  gzip on;
  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
  gzip_proxied any; # Compress responses for all proxied requests
  gzip_comp_level 5; # Compression level (1-9, 5 is a good balance)
  gzip_buffers 16 8k; # Number and size of buffers for compression
  gzip_min_length 256; # Minimum length of response to compress
  gzip_vary on; # Add a "Vary: Accept-Encoding" header to compressed responses
}